/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package playfieldmapconverter;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import static playfieldmapconverter.FileUtilities.*;

/**
 * TranslatorFrame is the main frame of our GUI here.
 *
 * @author danj
 */
public class TranslatorFrame extends javax.swing.JFrame {

    private RgbMap rgbMap = new RgbMap();
    private File rgbMapFile;
    private File imageFile;

    /**
     * Creates new form TranslatorFrame
     */
    public TranslatorFrame() {
        initComponents();
        updateSelectionSummary();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        openButton = new javax.swing.JButton();
        splitPanel = new javax.swing.JSplitPane();
        mapPanel = new playfieldmapconverter.MapPanel();
        translationScrollPanel = new javax.swing.JScrollPane();
        translatedTextArea = new javax.swing.JTextArea();
        copyButton = new javax.swing.JButton();
        selectionSummaryLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Playfield Map Converter");

        openButton.setText("Open...");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        mapPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mapPanel.setPreferredSize(new java.awt.Dimension(350, 200));
        mapPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapPanelActionPerformed(evt);
            }
        });
        mapPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                mapPanelPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        splitPanel.setLeftComponent(mapPanel);

        translationScrollPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        translatedTextArea.setEditable(false);
        translatedTextArea.setColumns(20);
        translatedTextArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        translatedTextArea.setRows(5);
        translationScrollPanel.setViewportView(translatedTextArea);

        splitPanel.setRightComponent(translationScrollPanel);

        copyButton.setText("Copy to Clipboard");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        selectionSummaryLabel.setText("Selection here");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(splitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectionSummaryLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectionSummaryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(copyButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        openMap();
    }//GEN-LAST:event_openButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        StringSelection translation = new StringSelection(translatedTextArea.getText());
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        cb.setContents(translation, translation);
    }//GEN-LAST:event_copyButtonActionPerformed

    private void mapPanelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_mapPanelPropertyChange
        if (evt.getPropertyName() == null || evt.getPropertyName().equals("SelectedColor")) {
            updateSelectionSummary();
        }
    }//GEN-LAST:event_mapPanelPropertyChange

    private void mapPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapPanelActionPerformed
       openLegend();
    }//GEN-LAST:event_mapPanelActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        saveTranslation();
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private playfieldmapconverter.MapPanel mapPanel;
    private javax.swing.JButton openButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel selectionSummaryLabel;
    private javax.swing.JSplitPane splitPanel;
    private javax.swing.JTextArea translatedTextArea;
    private javax.swing.JScrollPane translationScrollPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * This method displays a file chooser dialog that lets you open a map file.
     */
    private void openMap() {
        File selFile = chooseOpenFile(this,
                new FileNameExtensionFilter("PNG Image", "png"));

        if (selFile != null) {
            loadMap(selFile);
        }
    }

    /**
     * This method loads a specific file into the frame.
     */
    private void loadMap(File file) {
        try {
            imageFile = file;
            rgbMapFile = RgbMap.getLegendFile(file);

            BufferedImage image = ImageIO.read(file);

            if (rgbMapFile.exists()) {
                rgbMap = RgbMap.readFrom(rgbMapFile);
            } else {
                rgbMap = new RgbMap();
            }

            mapPanel.setImage(image);

            updateTranslation();
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }

    /**
     * this method opens a file chooser to let you save the trsnslatio text.
     */
    public void saveTranslation() {
        File selFile = chooseSaveFile(this,
                replaceExtension(imageFile, ".txt"),
                new FileNameExtensionFilter("Text File", "txt"));

        if (selFile != null) {
            writeTextFile(selFile, translatedTextArea.getText());
        }
    }

    /**
     * This method opens the map legend dialog, allow the user
     * to edit the legend data.
     */
    public void openLegend() {
        LegendDialog f = new LegendDialog(this, rgbMap, mapPanel.getSelectedColor());
        f.setLocationRelativeTo(this);

        f.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                updateTranslation();
                updateSelectionSummary();

                if (rgbMapFile != null) {
                    rgbMap.writeTo(rgbMapFile);
                }
            }
        });

        f.setVisible(true);
    }

    /**
     * This method updates the text displayed in the translated text area.
     */
    private void updateTranslation() {
        BufferedImage image = mapPanel.getImage();

        String translated = image != null ? rgbMap.translate(image) : "";
        translatedTextArea.setText(translated);
    }

    /**
     * this method updates the text that appears below the map to indicate what
     * cell is selected.
     */
    private void updateSelectionSummary() {
        Rgb rgb = mapPanel.getSelectedColor();

        if (rgb == null) {
            selectionSummaryLabel.setText("(no selection)");
        } else {
            LegendEntry entry = rgbMap.getOrCreate(rgb);
            selectionSummaryLabel.setText(entry.toString());
        }
    }
}
